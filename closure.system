;;; -*- Mode: Lisp; Syntax: Common-Lisp; Package: CL-USER; Encoding: utf-8; -*-

;; commit test

(in-package :common-lisp-user)

;;; Random early Lisp Implementation-specific fix ups:

#+EXCL
(progn
  (require :clx)
  ;(load "~/../gilbert-neu/lisp/clx-acl/macros.cl")
  ;(load "~/../gilbert-neu/lisp/clx-acl/bufmac.cl")
  (unuse-package :excl)
  ;;(load "~/lisp/defsystem/defsystem.lisp")
  )
#+EXCL
(progn
  (setq mk::*bother-user-if-no-binary* nil)
  (setq mk::*compile-during-load* t) )

#+CMU
(setq ext:*GC-VERBOSE* nil) ;das merk ich schon selbst.

;;;; Try to find defsystem
#-MK-DEFSYSTEM
(or
 (ignore-errors (load "library:subsystems/defsystem"))
 (load (compile-file (merge-pathnames "other/defsystem/defsystem.lisp"))))

(eval-when (compile eval load)
  (pushnew :DEBUG-CLOSURE *features*))

;;;;
;;;; Optimization levels:
;;;;

;; FIXME: This is not exactly the right place!

;; We choose to make them constants for read-time evaluation, since we
;; want the presence of the :DEBUG-CLOSURE feature to override any
;; (saftey 0) declaration.

(defparameter +optimize-very-fast+
  '(optimize (safety #.(or #+:DEBUG-CLOSURE 3 0)) (speed 3) #+:DEBUG-CLOSURE (debug 3)))

(defparameter +optimize-very-fast-trusted+
  '(optimize (safety #.(or #+:DEBUG-CLOSURE 3 0)) (speed 3) #+:DEBUG-CLOSURE (debug 3)))

(defparameter +optimize-fast+
  '(optimize (safety #.(or #+:DEBUG-CLOSURE 3 1)) (speed 3) #+:DEBUG-CLOSURE (debug 3)))

(defparameter +optimize-normal+
  '(optimize (safety #.(or #+:DEBUG-CLOSURE 3 2)) (speed 1) #+:DEBUG-CLOSURE (debug 3)))

(export '+optimize-very-fast-trusted+)
(export '+optimize-very-fast+)
(export '+optimize-fast+)
(export '+optimize-normal+)

;; Finally declaim normal optimization level
(declaim #.+optimize-normal+)

;;(load (merge-pathnames "glisp.system" *load-pathname*))
;;(load (merge-pathnames "graphics-utilities.system" *load-pathname*))

;;;

(eval-when (compile eval load)
  (defun rel-path (&rest components)
    (print    (merge-pathnames (make-pathname :name nil :type nil
                                              :directory (cons :relative components))
                               (make-pathname :name nil :type nil
                                              :defaults
                                              (truename *load-pathname*))))))

;; Make this build with the CVS tree also ...
(ignore-errors
  (load (merge-pathnames "system.lisp" (rel-path "other" "mcclim"))))

(mk:defsystem glisp
    :source-pathname #.(rel-path "src" "glisp")
    :initially-do (progn
                    (defpackage :glisp (:use))
                    #+EXCL (setq comp:*cltl1-compile-file-toplevel-compatibility-p* t)
                    )
    :finally-do (progn
                  #+EXCL (setq comp:*cltl1-compile-file-toplevel-compatibility-p* nil))

    :components
    ((:file dependent
      :source-pathname
      #+CLISP                             "dep-clisp"
      #+(AND :CMU (NOT :PTHREAD))         "dep-cmucl"
      #+(AND :CMU :PTHREAD)               "dep-cmucl-dtc"
      #+(AND ALLEGRO ALLEGRO-V5.0)        "dep-acl5"
      #+(AND ALLEGRO (NOT ALLEGRO-V5.0))  "dep-acl"
      #+GCL                               "dep-gcl"
      #+OPENMCL                           "dep-openmcl"
      #-(OR OPENMCL CLISP CMU ALLEGRO GCL) #.(error "Configure!"))
     (:file "package"
      :depends-on (dependent))
     (:file "runes"
      :depends-on ("package" dependent))
     (:file "util"
      :depends-on ("package" dependent "runes"))
     (:file "match"
      :depends-on ("package" dependent "runes" "util")) )) 


(mk:defsystem closure
    :source-pathname (make-pathname :name nil :type nil
                                    :defaults *load-truename*)
    :source-extension "lisp"
    :depends-on (:clx
                 :clim
                 :clim-clx
                 :glisp)
    :components
    (
     (:module src
      :source-pathname "src"
      :components
      (
     ;;; Patches
     
       (:module patches
        :source-pathname "patches"
        :components
        (:serial "clx-patch"))

     ;;; Images
     
       (:module imagelib
        :source-pathname "imagelib"
        :components
        (:serial
         "package"
         "basic"
         "deflate"
         "png"))

     ;;; Early package definitions

       (:file "defpack")
     
     ;;; Clousure Protocol Declarations first
     
       (:module closure-protcols
        :source-pathname "protocols"
        :components
        ((:file "package")
         (:file "element")
         (:file "css-support")))

     ;;; Libraries
     
       (:module xml
        :source-pathname "xml"
        :components
        ((:file "package")
         (:file "encodings"       :depends-on ("package"))
         (:file "encodings-data"  :depends-on ("package" "encodings"))
         (:file "dompack")
         (:file "dom-impl"        :depends-on ("dompack"))
         (:file "xml-stream"      :depends-on ("package"))
         (:file "xml-name-rune-p" :depends-on ("package"))
         (:file "xml-parse"       :depends-on ("package" "dompack"))
         (:file "xml-canonic"     :depends-on ("package" "dompack" "xml-parse"))  ))

     ;;; CLEX and LALR
     
       (:module clex
        :source-pathname "util"
        :components
        ((:file "clex") ))
               
       (:module lalr
        :source-pathname "util"
        :components
        ((:file "lalr") ))

     ;;; Networking stuff
     
       (:module netlib
        :source-pathname "net"
        :components
        ((:file "package"       :depends-on ("url"))
         (:file "common-parse"  :depends-on ("package"))
         (:file "mime"          :depends-on ("package"))
         (:file "url"           :depends-on ())
         (:file "http"          :depends-on ("package" "url"))
         (:file "ftp"           :depends-on ("package" "url")) ))

     ;;; The HTML parser
     
       (:module sgml-parse
        :source-pathname "parse"
        :components
        ((:file "package")
         (:file "pt"              :depends-on ("package"))
         (:file "sgml-dtd"        :depends-on ("package"))
         (:file "sgml-parse"      :depends-on ("package" "sgml-dtd")) ))

     ;;; More Random Utilities
     
       (:module util
        :source-pathname "util"
        :components
        (:parallel "character-set"
         "xterm"))

     ;;; CSS

       (:module css
        :source-pathname "css"
        :components
        (:serial
         "package"
         "css-support"
         "css-parse"
         "css-selector"
         "css-setup"
         "css-properties"))

     ;;; Renderer
     
       (:module renderer
        :source-pathname "renderer"
        :components
        (:serial
         "package"

         "device"                       ;Declaration of the device abstraction
         "fonts"                        ;Font Databases
         
         "texpara"
         "images"
         "x11"
         "r-struct"
         "document"
         "raux"
         "renderer"
         "hyphenation"                  ;Hyphenation of words
         "clim-draw"                    ;some drawing "primitives" for the clim device
         "renderer2"
         "list-item"     
         ; "tables"
         "clim-device"))

     ;;; HTML
     
       (:module html
        :source-pathname "html"
        :components
        (:serial
         "html-style"))

     ;;; GUI

       (:module gui
        :source-pathname "gui"
        :components
        (:serial
         "gui" "clue-gui" "dce-and-pce" "clue-input"
         ;;
         "clim-gui") )

     ;;; Patches

       (:file "patch")
       ))

     ;;; Some resources
     
     (:module resources
      :source-pathname "resources"
      :components
      (:serial
       "resources.lisp")) ))
